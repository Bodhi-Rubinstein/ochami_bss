# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Destructive Tavern test cases for BSS bootparameters API
# Author: Ryan Sjostrand
# Service: Boot Script Service

---
test_name: bssAPIBootparameterMACAddressAsIdentifier

stages:
- name: Query HSM State Components for a compute node
  request:
    url: "{hsm_base_url}/hsm/v2/State/Components?Type=Node&Role=Compute"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    save:
        json:
          node_xname: Components[0].ID

- name: Query HSM EthernetInterfaces for the compute nodes MAC address
  request:
    url: "{hsm_base_url}/hsm/v2/Inventory/EthernetInterfaces?ComponentID={node_xname}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    save:
        json:
          node_mac_address: '[0].MACAddress'

- name: Delete existing test bootparameters if it exists
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"

- name: Create or Update Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PUT
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
      params: console=tty0
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 200
    headers:
      BSS-Referral-Token: !anystr

- name: Create duplicate Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: POST
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
      params: console=tty0
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 400
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False

- name: Retrieve created Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Replace Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PUT
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
      params: console=tty0 console=ttyS0,115200
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
  response:
    status_code: 200
    headers:
      BSS-Referral-Token: !anystr

- name: Retrieve replaced Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0 console=ttyS0,115200
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Update Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PATCH
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
  response:
    status_code: 200

- name: Retrieve replaced Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0 console=ttyS0,115200
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Delete Bootparameters with mac as identifer
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
  response:
    status_code: 200

- name: Retrieve deleted Bootparameters with mac specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 404
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False

- name: Delete Bootparameters with mac as identifer
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      macs:
      - "{node_mac_address}"
  response:
    status_code: 400
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False

- name: Delete testing bootparameters by kernel 0
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
  response:
    status_code: 200  
- name: Delete testing bootparameters by kernel 1
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
  response:
    status_code: 200  
- name: Delete testing bootparameters by kernel 2
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
  response:
    status_code: 200  

- name: Delete testing bootparameters by initrd 0
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 200  
- name: Delete testing bootparameters by initrd 1
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 200  
- name: Delete testing bootparameters by initrd 2
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 200  

---
test_name: bssAPIBootparameterNIDAsIdentifier

stages:
- name: Query HSM State Components for a compute node
  request:
    url: "{hsm_base_url}/hsm/v2/State/Components?Type=Node&Role=Compute"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    save:
        json:
          node_xname: Components[0].ID
          node_nid: Components[0].NID

- name: Delete existing test bootparameters if it exists
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"

- name: Create Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: POST
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
      params: console=tty0
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 201
    headers:
      BSS-Referral-Token: !anystr

- name: Create duplicate Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: POST
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
      params: console=tty0
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
  response:
    status_code: 400
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False

- name: Retrieve created Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Replace Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PUT
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
      params: console=tty0 console=ttyS0,115200
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
  response:
    status_code: 200
    headers:
      BSS-Referral-Token: !anystr

- name: Retrieve replaced Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0 console=ttyS0,115200
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Update Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: PATCH
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
      kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
      initrd: s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
  response:
    status_code: 200

- name: Retrieve replaced Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 200
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: seq
          range:
            max: 1
          matching: all
          sequence:
          - type: map
            mapping:
              hosts:
                type: seq
                sequence:
                - type: str
                  enum:
                  - "{node_xname}"
              macs:
                type: seq
                range:
                  max: 0
                sequence:
                - type: str
              nids:
                type: seq
                range:
                  max: 0
                sequence:
                - type: int
              params:
                type: str
                enum: 
                - console=tty0 console=ttyS0,115200
              kernel:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
              initrd:
                type: str
                enum:
                - s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
              cloud-init:
                type: map
                allowempty: true
                mapping:
                  meta-data:
                    type: none
                  user-data:
                    type: none
                  phone-home:
                    type: map
                    mapping:
                      pub_key_dsa:
                        type: str
                        enum:
                        - ""
                      pub_key_rsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ecdsa:
                        type: str
                        enum:
                        - ""
                      pub_key_ed25519:
                        type: str
                        enum:
                        - ""
                      instance_id:
                        type: str
                        enum:
                        - ""
                      hostname:
                        type: str
                        enum:
                        - ""
                      fqdn:
                        type: str
                        enum:
                        - ""

- name: Delete Bootparameters with NID as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
  response:
    status_code: 200

- name: Retrieve deleted Bootparameters with NID specified as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 404
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False

- name: Delete Bootparameters with NID as identifier
  request:
    url: "{bss_base_url}/boot/v1/bootparameters"
    method: DELETE
    verify: !bool "{verify}"
    json:
      nids:
      - !int "{node_nid}"
  response:
    status_code: 400
    verify_response_with:
      function: tavern.testutils.helpers:validate_pykwalify
      extra_kwargs:
        schema:
          type: map
          required: True
          mapping:
            type:
              type: str
              required: True
            title:
              type: str
              required: True
            detail:
              type: str
              required: False
            instance:
              type: str
              required: False
            status:
              type: int
              required: False
