---

# DELETE /bootparameters Remove all
# GET /bootparamters check response on empty bootparameters

# ---
# With with MAC Address 
test_name: bssAPIBootparameterMACAddressAsIdentifier
# With xname as host

# THIS might be considered a destrucive steps, as I need to overwrite data for a existing node.
# Also BSS is looking at Component Endpoints instead of EthernetInterfaces

# BSS transforms the MAC address into the xname of the node if available
# If the MAC doesn't exist in BSS, the MAC becomes the host. And then the query params for BSS MAC no longer work.
#  But if HSM has the MAC address in EthernetInterfaces 

# In the case of NIDs, if the NID doesn't exist in HSM the NID becomes nidXXXXXX, this is an altname for the node.

# There is a prescendece order in how BSS uses the hosts/mac/nid data. 

# The MAC/NID parameters seem like to be short cuts

# THIS TEST WILL make one node no longer bootable with BSS

stages:
  - name: Query HSM State Components for a compute node
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?Type=Node&Role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
          json:
            node_xname: Components[0].ID

  - name: Query HSM EthernetInterfaces for the compute nodes MAC address
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/EthernetInterfaces?ComponentID={node_xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
          json:
            node_mac_address: '[0].MACAddress'

  - name: Delete exiting test bootparamters if it exists
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"

#   POST /bootparamters with Xname as host
  - name: Create Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: POST
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
        params: console=tty0
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 201
      headers:
        BSS-Referral-Token: !anystr

#   POST /bootparameters with a duplicate xname - Negative
  - name: Create duplicate Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: POST
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
        params: console=tty0
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False

#    GET /bootparameters?name=TODO_XNAME
  - name: Retrieve created Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""
#    PUT /bootparameters with host xname
  - name: Replace Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: PUT
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
        params: console=tty0 console=ttyS0,115200
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
    response:
      status_code: 200
      headers:
        BSS-Referral-Token: !anystr
#    GET /bootparameters?name=TODO_XNAME # Verify PUT
  - name: Retrieve replaced Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0 console=ttyS0,115200
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""

#  PATCH /bootparameters with host xname
  - name: Update Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: PATCH
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
    response:
      status_code: 200

#    GET /bootparameters?name=TODO_XNAME # Verify PATCH
  - name: Retrieve replaced Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0 console=ttyS0,115200
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""
# DELETE /bootparamters with Xname as host 
  - name: Delete Bootparameters with mac as identifer
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
    response:
      status_code: 200
#    GET /bootparameters?name=TODO_XNAME - does not exist, check status code
  - name: Retrieve deleted Bootparameteters with mac specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?mac={node_mac_address}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False

# DELETE /bootparamters on non-existant bootparamters
  - name: Delete Bootparameters with mac as identifer
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        macs:
        - "{node_mac_address}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False

  - name: Delete testing bootparamters by kernel 0
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
    response:
      status_code: 200  
  - name: Delete testing bootparamters by kernel 1
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
    response:
      status_code: 200  
  - name: Delete testing bootparamters by kernel 2
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
    response:
      status_code: 200  

  - name: Delete testing bootparamters by initrd 0
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 200  
  - name: Delete testing bootparamters by initrd 1
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 200  
  - name: Delete testing bootparamters by initrd 2
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 200  
---

# DELETE /bootparameters Remove all
# GET /bootparamters check response on empty bootparameters

# ---
# With with MAC Address 
test_name: bssAPIBootparameterNIDAsIdentifier
# With xname as host

# THIS might be considered a destrucive steps, as I need to overwrite data for a existing node.
# Also BSS is looking at Component Endpoints instead of EthernetInterfaces

# BSS transforms the MAC address into the xname of the node if available
# If the MAC doesn't exist in BSS, the MAC becomes the host. And then the query params for BSS MAC no longer work.
#  But if HSM has the MAC address in EthernetInterfaces 

# In the case of NIDs, if the NID doesn't exist in HSM the NID becomes nidXXXXXX, this is an altname for the node.

# There is a prescendece order in how BSS uses the hosts/mac/nid data. 

# The MAC/NID parameters seem like to be short cuts

# THIS TEST WILL make one node no longer bootable with BSS

stages:
  - name: Query HSM State Components for a compute node
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?Type=Node&Role=Compute"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
          json:
            node_xname: Components[0].ID
            node_nid: Components[0].NID

  - name: Delete exiting test bootparamters if it exists
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"

#   POST /bootparamters with Xname as host
  - name: Create Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: POST
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
        params: console=tty0
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 201
      headers:
        BSS-Referral-Token: !anystr

#   POST /bootparameters with a duplicate xname - Negative
  - name: Create duplicate Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: POST
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
        params: console=tty0
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False

#    GET /bootparameters?name=TODO_XNAME
  - name: Retrieve created Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""
#    PUT /bootparameters with host xname
  - name: Replace Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: PUT
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
        params: console=tty0 console=ttyS0,115200
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
    response:
      status_code: 200
      headers:
        BSS-Referral-Token: !anystr
#    GET /bootparameters?name=TODO_XNAME # Verify PUT
  - name: Retrieve replaced Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0 console=ttyS0,115200
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""

#  PATCH /bootparameters with host xname
  - name: Update Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: PATCH
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
    response:
      status_code: 200

#    GET /bootparameters?name=TODO_XNAME # Verify PATCH
  - name: Retrieve replaced Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            range:
              max: 1
            matching: all
            sequence:
            - type: map
              mapping:
                hosts:
                  type: seq
                  sequence:
                  - type: str
                    enum:
                    - "{node_xname}"
                macs:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: str
                nids:
                  type: seq
                  range:
                    max: 0
                  sequence:
                  - type: int
                params:
                  type: str
                  enum: 
                  - console=tty0 console=ttyS0,115200
                kernel:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
                initrd:
                  type: str
                  enum:
                  - s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
                cloud-init:
                  type: map
                  allowempty: true
                  mapping:
                    meta-data:
                      type: none
                    user-data:
                      type: none
                    phone-home:
                      type: map
                      mapping:
                        pub_key_dsa:
                          type: str
                          enum:
                          - ""
                        pub_key_rsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ecdsa:
                          type: str
                          enum:
                          - ""
                        pub_key_ed25519:
                          type: str
                          enum:
                          - ""
                        instance_id:
                          type: str
                          enum:
                          - ""
                        hostname:
                          type: str
                          enum:
                          - ""
                        fqdn:
                          type: str
                          enum:
                          - ""
# DELETE /bootparamters with Xname as host 
  - name: Delete Bootparameters with NID as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
    response:
      status_code: 200
#    GET /bootparameters?name=TODO_XNAME - does not exist, check status code
  - name: Retrieve deleted Bootparameteters with NID specified as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters?nid={node_nid}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False

# DELETE /bootparamters on non-existant bootparamters
  - name: Delete Bootparameters with NID as identifier
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        nids:
        - !int "{node_nid}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
              title:
                type: str
                required: True
              detail:
                type: str
                required: False
              instance:
                type: str
                required: False
              status:
                type: int
                required: False
  - name: Delete testing bootparamters by kernel 0
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000000/kernel
    response:
      status_code: 200  
  - name: Delete testing bootparamters by kernel 1
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000001/kernel
    response:
      status_code: 200  
  - name: Delete testing bootparamters by kernel 2
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        kernel: s3://boot-images/00000000-0000-0000-0000-000000000002/kernel
    response:
      status_code: 200  

  - name: Delete testing bootparamters by initrd 0
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000000/initrd
    response:
      status_code: 200  
  - name: Delete testing bootparamters by initrd 1
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000001/initrd
    response:
      status_code: 200  
  - name: Delete testing bootparamters by initrd 2
    request:
      url: "{bss_base_url}/boot/v1/bootparameters"
      method: DELETE
      verify: !bool "{verify}"
      json:
        initrd: s3://boot-images/00000000-0000-0000-0000-000000000002/initrd
    response:
      status_code: 200  