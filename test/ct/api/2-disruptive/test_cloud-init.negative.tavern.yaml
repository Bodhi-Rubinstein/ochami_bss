# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern negative test cases for the BSS bootparameters API
# Author: Ryan Sjostrand
# Service: Boot Script Service

# HMS test metrics test cases: 18
# 1. DELETE /meta-data API response code
# 2. PATCH /meta-data API response code
# 3. POST /meta-data API response code
# 4. PUT /meta-data API response code
# 5. GET /meta-data?key={key} Retrieve a non-existent key. API response code
# 6. GET /meta-data?key={key} Retrieve a non-existent key. API response body
# 7. GET /meta-data?key=this.key.does.not.exist Retrieve a non-existent nested key. API response code
# 8. GET /meta-data?key=this.key.does.not.exist Retrieve a non-existent nested key. API response body

# 9. DELETE /user-data API response code
# 10. PATCH /user-data API response code
# 11. POST /user-data API response code
# 12. PUT /user-data API response code
#
# 13. DELETE /phone-home API response code
# 14. PATCH /phone-home API response code
# 15. PUT /phone-home API response code
# 16. GET /phone-home API response code
# 17. POST /phone-home with json payload API response code
# 18. POST /phone-home with malformed json payload API response code

---

test_name: bssAPIcloudinitMetaDataNegative

stages:
# 1. DELETE /meta-data API response code
- name: Perform DELETE against /meta-data
  request:
    url: "{bss_base_url}/meta-data"
    method: DELETE
    verify: !bool "{verify}"
  response:
    status_code: 405

# 2. PATCH /meta-data API response code
- name: Perform PATCH against /meta-data
  request:
    url: "{bss_base_url}/meta-data"
    method: PATCH
    verify: !bool "{verify}"
  response:
    status_code: 405

# 3. POST /meta-data API response code
- name: Perform POST against /meta-data
  request:
    url: "{bss_base_url}/meta-data"
    method: POST
    verify: !bool "{verify}"
  response:
    status_code: 405

# 4. PUT /meta-data API response code
- name: Perform PUT against /meta-data
  request:
    url: "{bss_base_url}/meta-data"
    method: PUT
    verify: !bool "{verify}"
  response:
    status_code: 405

# 5. GET /meta-data?key={key} Retrieve a non-existent key. API response code
# 6. GET /meta-data?key={key} Retrieve a non-existent key. API response body
- name: Query /meta-data for non-existent key
  request:
    url: "{bss_base_url}/meta-data"
    method: GET
    verify: !bool "{verify}"
    params:
      key: not-a-valid-metadata-key
  response:
    status_code: 404
    json:
      type: about:blank
      title: Not Found
      status: 404
      detail: Not Found

# 7. GET /meta-data?key=this.key.does.not.exist Retrieve a non-existent nested key. API response code
# 8. GET /meta-data?key=this.key.does.not.exist Retrieve a non-existent nested key. API response body
- name: Query cloud-init meta-data for a non-existent nested value
  request:
    url: "{bss_base_url}/meta-data"
    method: GET
    verify: !bool "{verify}"
    params:
      key: this.value.does.not.exist
  response:
    status_code: 404
    json:
      type: about:blank
      title: Not Found
      status: 404
      detail: Not Found

---
test_name: bssAPIcloudinitUserDataNegative

stages:
# 9. DELETE /user-data API response code
- name: Perform DELETE against /user-data
  request:
    url: "{bss_base_url}/user-data"
    method: DELETE
    verify: !bool "{verify}"
  response:
    status_code: 405

# 10. PATCH /user-data API response code
- name: Perform PATCH against /user-data
  request:
    url: "{bss_base_url}/user-data"
    method: PATCH
    verify: !bool "{verify}"
  response:
    status_code: 405

# 11. POST /user-data API response code
- name: Perform POST against /user-data
  request:
    url: "{bss_base_url}/user-data"
    method: POST
    verify: !bool "{verify}"
  response:
    status_code: 405

# 12. PUT /user-data API response code
- name: Perform PUT against /user-data
  request:
    url: "{bss_base_url}/user-data"
    method: PUT
    verify: !bool "{verify}"
  response:
    status_code: 405

---
test_name: bssAPIcloudinitPhoneHomeNegative

stages:
# 13. DELETE /phone-home API response code
- name: Perform DELETE against /phone-home
  request:
    url: "{bss_base_url}/phone-home"
    method: DELETE
    verify: !bool "{verify}"
  response:
    status_code: 405

# 14. PATCH /phone-home API response code
- name: Perform GET against /phone-home
  request:
    url: "{bss_base_url}/phone-home"
    method: GET
    verify: !bool "{verify}"
  response:
    status_code: 405

# 15. PUT /phone-home API response code
- name: Perform PATCH against /phone-home
  request:
    url: "{bss_base_url}/phone-home"
    method: PATCH
    verify: !bool "{verify}"
  response:
    status_code: 405

# 16. GET /phone-home API response code
- name: Perform PUT against /phone-home
  request:
    url: "{bss_base_url}/phone-home"
    method: PUT
    verify: !bool "{verify}"
  response:
    status_code: 405

# 17. POST /phone-home with json payload API response code
- name: Perform POST against /phone-home without json payload
  request:
    url: "{bss_base_url}/phone-home"
    method: POST
    verify: !bool "{verify}"
  response:
    status_code: 400

# 18. POST /phone-home with malformed json payload API response code
- name: Perform POST against /phone-home with malformed json payload
  request:
    url: "{bss_base_url}/phone-home"
    method: POST
    verify: !bool "{verify}"
    data: "This is not json"
  response:
    status_code: 400
